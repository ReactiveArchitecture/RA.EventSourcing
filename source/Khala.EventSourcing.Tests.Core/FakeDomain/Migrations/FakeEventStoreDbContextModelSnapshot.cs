// <auto-generated />
using Khala.FakeDomain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Khala.FakeDomain.Migrations
{
    [DbContext(typeof(FakeEventStoreDbContext))]
    partial class FakeEventStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Khala.EventSourcing.Sql.Aggregate", b =>
                {
                    b.Property<long>("SequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AggregateId");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Version")
                        .IsConcurrencyToken();

                    b.HasKey("SequenceId");

                    b.HasIndex("AggregateId")
                        .IsUnique();

                    b.ToTable("Aggregates");
                });

            modelBuilder.Entity("Khala.EventSourcing.Sql.Correlation", b =>
                {
                    b.Property<Guid>("AggregateId");

                    b.Property<Guid>("CorrelationId");

                    b.Property<DateTime>("HandledAt");

                    b.HasKey("AggregateId", "CorrelationId");

                    b.ToTable("Correlations");
                });

            modelBuilder.Entity("Khala.EventSourcing.Sql.PendingEvent", b =>
                {
                    b.Property<Guid>("AggregateId");

                    b.Property<int>("Version");

                    b.Property<string>("Contributor");

                    b.Property<Guid?>("CorrelationId");

                    b.Property<string>("EventJson")
                        .IsRequired();

                    b.Property<Guid>("MessageId");

                    b.Property<Guid?>("OperationId");

                    b.HasKey("AggregateId", "Version");

                    b.ToTable("PendingEvents");
                });

            modelBuilder.Entity("Khala.EventSourcing.Sql.PersistentEvent", b =>
                {
                    b.Property<long>("SequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AggregateId");

                    b.Property<string>("Contributor")
                        .HasMaxLength(128);

                    b.Property<Guid?>("CorrelationId");

                    b.Property<string>("EventJson")
                        .IsRequired();

                    b.Property<string>("EventType")
                        .IsRequired();

                    b.Property<Guid>("MessageId");

                    b.Property<Guid?>("OperationId");

                    b.Property<DateTime>("RaisedAt");

                    b.Property<int>("Version");

                    b.HasKey("SequenceId");

                    b.HasIndex("AggregateId", "Version")
                        .IsUnique();

                    b.ToTable("PersistentEvents");
                });

            modelBuilder.Entity("Khala.EventSourcing.Sql.UniqueIndexedProperty", b =>
                {
                    b.Property<string>("AggregateType")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyValue")
                        .HasMaxLength(128);

                    b.Property<Guid>("AggregateId");

                    b.Property<int>("Version")
                        .IsConcurrencyToken();

                    b.HasKey("AggregateType", "PropertyName", "PropertyValue");

                    b.HasIndex("AggregateId", "PropertyName")
                        .IsUnique();

                    b.ToTable("UniqueIndexedProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
